03/07/2020 
----------------------------------------------------

GOAL: I want to get the decryption bug sorted and maybe get a basic commandline and dll project setup
- Seems the offset calculation for the third packcode is messed up, removing that block copy line doesn't seem to change the output of the file

OUTCOME: Seems that it isn't the third packcode that is misbehaving, but seems that the other decompression algorithm for that sims 3 save modifier tool
can be used in place so best thing to do next is to keep altering and copying over parts of their implementaton until you find a part that A.) fixes the bug
or B.) modifies part of the output that was messing up

options:
1) replace pieces of the other c# DBPF algorithm and see if it works
2) write your own implementation
3) get the c library to work in code

12/07/2020
----------------------------------------------------

1.) tried that but the output was the same, either the output of my source of truth is wrong or both algorithms are incorrect
    or the implementation of the loops is wrong... 

going to test if the c++ algorithm actually works correctly


20/07/2020
----------------------------------------------------

The QFS stuff has blocked me for too long, I am pretty sure that getting the c++ implementation would work (in whatever form of the algorithm I choose)

I could use the one from ilives or from the python tools, either way I will have to come back to it, I need to focus on reading the subfiles. I am mainly focused on 4:
1.) Building
2.) Lot
(below are nice to have)
3.) Transport
4.) Terrain
5.) prop

The terrain and transport subfiles would be nice to have, I don't have a definite map on how they are laid out but the wiki seems to say they are both fully decoded, we will see...

So my plan going forward is this, use ilives to decompress the file, load the binary raw, work on implementing the layout of the files. Displaying it is still unknown but I need to move on to stop this from dragging on.

I'll upload all the sources of different QFS solutions I have found too, like I said I'll come back to getting compression working later on.

I'll start with the building subfile...

(1 hour later)

Shit I got caught going down another QFS rabbit hole, I have so many implementations of this algorithm from such scattered parts of the web. Surely I can cobble something together. Hell I even have done enough research I might as well implement my own.

Not now though. I'll save _everything_ and come back to this waking nightmare blocker later.

That was exhausting, but I have all my resources for quickref/qfs laid out and ready to come back to later.
I imagine my fix will be one of these:

- Me going through my existing solution with the spec
- Converting the c++ code into a library and calling that from c#
- Writing my own

All these are doable, for now I will move along and come back to this later.
I added the initial stuff for the building files, there probably will be some unknowns (it is not clear how the file repeats for each building) but we will tackle that as it comes.

21/07/2020
-------------------------------------

Just going to get a bit of work done on the building file, not quite sure how it is laid out (how each building is specified etc) but lets have a go.

Ok so I didn't get too much done, but I was able to learn a lot more about how the building file is structured:

- The structure found here: https://www.wiki.sc4devotion.com/index.php?title=Building_Subfile#Structure is repeated for each building
- Each building has a SGPROP valve depending on it's role, might make parsing a bit annoying but should be doable
- I found an update to SC4 save that modified a file called external.py which has a lot of useful definitions of some of subfiles

Parsing begins tomorrow, I hope LOT is structured like this..

22/07/2020
--------------------------------------

Tired. Parsing is going well, not sure what to make of the array offset vs bitcoverter offset but oh well, this is why we picked going with handling everything in bytes arrays I suppose.

Buildingfile parsing is looking good, the sizes match perfectly with the size of the file. Not a byte to spare. This makes me think that whatever solution we go with for the qfs decompression will be that C implementation, no matter how hard it is to pass byte arrays between...

23/07/2020
--------------------------------------
More building parsing, seems to be going ok, can't quite work out what is going on with the appearance flag. According to the wiki it is supposed to be something other than 0 but unless I am printing the byte wrong that isn't the case...
Mighht come back to it later.

Hmm unknown value isn't the same as the wiki either, but it is always consistent...

So I got the fabled 0x278128A0 to show up (the wiki is inconsistent) Had to use a combo of wiki and sc4 save, both in the patched program and using external.py (line 412 has the def).
My appearance flag also shows 5 instead of 4... that is the value inside the buffer, it's inside the actual raw file! something weird is going on, maybe they are using some sort of offset like the wiki says.

To be honest I don't _need_ these values, everything else seems to be in check. I am going to rush through the rest of the fields and come back to this.

Using buffers is bitting me in the arse for this SGPROP stuff, I am knee deep in it at the moment. I need a way to be able to dynamically read a bunch of objects *MID* building property, real pain because dispite the fact that this might not be useful the properties after really are.

So this is beginning to look a bit hacky, for the most part I am happy with using buffers directly to read the data. For most of the files I have dealt with it hasn't been too bad, even the long ones, and I feel stream management is a bit of a pain. but for something like this, being able to copy the next X bytes would be really useful. Would break with the design pattern so I will live with my own design for now. 

It is not undoable and hey I might even come out with some relatively good looking at the end of it. I hope...